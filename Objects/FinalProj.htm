<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\FinalProj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\FinalProj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Jun 20 18:23:49 2023
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Consumer &rArr; LCD_DisplayScoreLife &rArr; BSP_LCD_Message &rArr; BSP_LCD_OutUDec4 &rArr; BSP_LCD_DrawString &rArr; BSP_LCD_DrawChar &rArr; setAddrWindow
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[af]">Reset_Handler</a>
 <LI><a href="#[10b]">OS_DisableInterrupts</a>
 <LI><a href="#[10e]">OS_EnableInterrupts</a>
 <LI><a href="#[9]">SysTick_Handler</a>
 <LI><a href="#[111]">StartOS</a>
 <LI><a href="#[139]">DisableInterrupts</a>
 <LI><a href="#[13a]">EnableInterrupts</a>
 <LI><a href="#[e7]">StartCritical</a>
 <LI><a href="#[e8]">EndCritical</a>
 <LI><a href="#[13b]">WaitForInterrupt</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[18]">ADC0Seq0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">ADC0Seq0_Handler</a><BR>
 <LI><a href="#[131]">fillmessage</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[131]">fillmessage</a><BR>
 <LI><a href="#[ce]">Bitmap_fillmessage</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ce]">Bitmap_fillmessage</a><BR>
 <LI><a href="#[117]">UART_OutUDec</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[117]">UART_OutUDec</a><BR>
 <LI><a href="#[b3]">parrotdelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b3]">parrotdelay</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[18]">ADC0Seq0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[19]">ADC0Seq1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1a]">ADC0Seq2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1b]">ADC0Seq3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3a]">ADC1Seq0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3b]">ADC1Seq1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3c]">ADC1Seq2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3d]">ADC1Seq3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[8d]">BSP_LCD_DrawBitmap</a> from lcd.o(i.BSP_LCD_DrawBitmap) referenced from pages.o(i.PVZPage)
 <LI><a href="#[8d]">BSP_LCD_DrawBitmap</a> from lcd.o(i.BSP_LCD_DrawBitmap) referenced from pages.o(i.StartPage)
 <LI><a href="#[8d]">BSP_LCD_DrawBitmap</a> from lcd.o(i.BSP_LCD_DrawBitmap) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[a3]">BSP_LCD_DrawChar</a> from lcd.o(i.BSP_LCD_DrawChar) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[a1]">BSP_LCD_DrawCharS</a> from lcd.o(i.BSP_LCD_DrawCharS) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[8c]">BSP_LCD_DrawCrosshair</a> from lcd.o(i.BSP_LCD_DrawCrosshair) referenced from pages.o(i.Menu)
 <LI><a href="#[8c]">BSP_LCD_DrawCrosshair</a> from lcd.o(i.BSP_LCD_DrawCrosshair) referenced from pages.o(i.PVZPage)
 <LI><a href="#[8c]">BSP_LCD_DrawCrosshair</a> from lcd.o(i.BSP_LCD_DrawCrosshair) referenced from pages.o(i.SettingPage)
 <LI><a href="#[8c]">BSP_LCD_DrawCrosshair</a> from lcd.o(i.BSP_LCD_DrawCrosshair) referenced from pages.o(i.StartPage)
 <LI><a href="#[8c]">BSP_LCD_DrawCrosshair</a> from lcd.o(i.BSP_LCD_DrawCrosshair) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[9e]">BSP_LCD_DrawFastHLine</a> from lcd.o(i.BSP_LCD_DrawFastHLine) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[9c]">BSP_LCD_DrawFastVLine</a> from lcd.o(i.BSP_LCD_DrawFastVLine) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[97]">BSP_LCD_DrawPixel</a> from lcd.o(i.BSP_LCD_DrawPixel) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[8b]">BSP_LCD_DrawString</a> from lcd.o(i.BSP_LCD_DrawString) referenced from pages.o(i.Menu)
 <LI><a href="#[8b]">BSP_LCD_DrawString</a> from lcd.o(i.BSP_LCD_DrawString) referenced from pages.o(i.SettingPage)
 <LI><a href="#[8b]">BSP_LCD_DrawString</a> from lcd.o(i.BSP_LCD_DrawString) referenced from pages.o(i.StartPage)
 <LI><a href="#[8b]">BSP_LCD_DrawString</a> from lcd.o(i.BSP_LCD_DrawString) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[8a]">BSP_LCD_DrawStringHighlight</a> from lcd.o(i.BSP_LCD_DrawStringHighlight) referenced from pages.o(i.Menu)
 <LI><a href="#[8a]">BSP_LCD_DrawStringHighlight</a> from lcd.o(i.BSP_LCD_DrawStringHighlight) referenced from pages.o(i.SettingPage)
 <LI><a href="#[8a]">BSP_LCD_DrawStringHighlight</a> from lcd.o(i.BSP_LCD_DrawStringHighlight) referenced from pages.o(i.StartPage)
 <LI><a href="#[8a]">BSP_LCD_DrawStringHighlight</a> from lcd.o(i.BSP_LCD_DrawStringHighlight) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[99]">BSP_LCD_FillRect</a> from lcd.o(i.BSP_LCD_FillRect) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[9a]">BSP_LCD_FillScreen</a> from lcd.o(i.BSP_LCD_FillScreen) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[82]">BSP_LCD_Message</a> from lcd.o(i.BSP_LCD_Message) referenced from main.o(i.Display)
 <LI><a href="#[82]">BSP_LCD_Message</a> from lcd.o(i.BSP_LCD_Message) referenced from pages.o(i.Menu)
 <LI><a href="#[82]">BSP_LCD_Message</a> from lcd.o(i.BSP_LCD_Message) referenced from pages.o(i.SettingPage)
 <LI><a href="#[82]">BSP_LCD_Message</a> from lcd.o(i.BSP_LCD_Message) referenced from pages.o(i.StartPage)
 <LI><a href="#[82]">BSP_LCD_Message</a> from lcd.o(i.BSP_LCD_Message) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[89]">BSP_LCD_MessageUDec3</a> from lcd.o(i.BSP_LCD_MessageUDec3) referenced from pages.o(i.Menu)
 <LI><a href="#[89]">BSP_LCD_MessageUDec3</a> from lcd.o(i.BSP_LCD_MessageUDec3) referenced from pages.o(i.PVZPage)
 <LI><a href="#[89]">BSP_LCD_MessageUDec3</a> from lcd.o(i.BSP_LCD_MessageUDec3) referenced from pages.o(i.SettingPage)
 <LI><a href="#[89]">BSP_LCD_MessageUDec3</a> from lcd.o(i.BSP_LCD_MessageUDec3) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[98]">BitmapSetPixel</a> from screen.o(i.BitmapSetPixel) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[a0]">Bitmap_DrawBitmap</a> from screen.o(i.Bitmap_DrawBitmap) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[85]">Bitmap_DrawBitmapTP</a> from screen.o(i.Bitmap_DrawBitmapTP) referenced from pvzgame.o(i.EntityInit)
 <LI><a href="#[85]">Bitmap_DrawBitmapTP</a> from screen.o(i.Bitmap_DrawBitmapTP) referenced from pages.o(i.PVZPage)
 <LI><a href="#[85]">Bitmap_DrawBitmapTP</a> from screen.o(i.Bitmap_DrawBitmapTP) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[8e]">Bitmap_DrawBox</a> from screen.o(i.Bitmap_DrawBox) referenced 2 times from pages.o(i.PVZPage)
 <LI><a href="#[8e]">Bitmap_DrawBox</a> from screen.o(i.Bitmap_DrawBox) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[a2]">Bitmap_DrawCharS</a> from screen.o(i.Bitmap_DrawCharS) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[a8]">Bitmap_DrawCrosshair</a> from screen.o(i.Bitmap_DrawCrosshair) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[9f]">Bitmap_DrawHLine</a> from screen.o(i.Bitmap_DrawHLine) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[a4]">Bitmap_DrawString</a> from screen.o(i.Bitmap_DrawString) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[a5]">Bitmap_DrawStringHighlight</a> from screen.o(i.Bitmap_DrawStringHighlight) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[9d]">Bitmap_DrawVLine</a> from screen.o(i.Bitmap_DrawVLine) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[86]">Bitmap_FillRect</a> from screen.o(i.Bitmap_FillRect) referenced from pvzgame.o(i.EntityInit)
 <LI><a href="#[86]">Bitmap_FillRect</a> from screen.o(i.Bitmap_FillRect) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[9b]">Bitmap_FillScreen</a> from screen.o(i.Bitmap_FillScreen) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[a7]">Bitmap_MessageUDec3</a> from screen.o(i.Bitmap_MessageUDec3) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[a6]">Bitmap_MessageUDec4</a> from screen.o(i.Bitmap_MessageUDec4) referenced from screen.o(i.act_FuncInStack)
 <LI><a href="#[4]">BusFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[31]">CAN0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[32]">CAN1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[33]">CAN2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[23]">Comp0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[24]">Comp1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[25]">Comp2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[94]">Consumer</a> from pages.o(i.Consumer) referenced from pages.o(i.SW1_PageFunc)
 <LI><a href="#[ae]">CubeNumCalc</a> from main.o(i.CubeNumCalc) referenced from main.o(i.main)
 <LI><a href="#[81]">CubeThread</a> from cube.o(i.CubeThread) referenced from cube.o(i.Cube_Generate)
 <LI><a href="#[7d]">Cube_Generate</a> from cube.o(i.Cube_Generate) referenced from pages.o(i.Consumer)
 <LI><a href="#[87]">DebouncePD6</a> from os.o(i.DebouncePD6) referenced from os.o(i.GPIOPortD_Handler)
 <LI><a href="#[88]">DebouncePD7</a> from os.o(i.DebouncePD7) referenced from os.o(i.GPIOPortD_Handler)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[90]">Display</a> from main.o(i.Display) referenced from main.o(i.Restart)
 <LI><a href="#[90]">Display</a> from main.o(i.Display) referenced from main.o(i.main)
 <LI><a href="#[83]">DisplayThread</a> from display.o(i.DisplayThread) referenced from pages.o(i.EndPage)
 <LI><a href="#[83]">DisplayThread</a> from display.o(i.DisplayThread) referenced from main.o(i.Restart)
 <LI><a href="#[83]">DisplayThread</a> from display.o(i.DisplayThread) referenced from main.o(i.main)
 <LI><a href="#[8f]">EndPage</a> from pages.o(i.EndPage) referenced from pages.o(i.PVZPage)
 <LI><a href="#[34]">Ethernet_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[91]">EventSound</a> from buzzer.o(i.EventSound) referenced from pages.o(i.SW1_PageFunc)
 <LI><a href="#[3f]">ExtBus_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5c]">FPU_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[64]">Fan0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[27]">FlashCtl_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[a]">GPIOPortA_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[b]">GPIOPortB_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[c]">GPIOPortC_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[d]">GPIOPortD_Handler</a> from os.o(i.GPIOPortD_Handler) referenced from startup.o(RESET)
 <LI><a href="#[e]">GPIOPortE_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[28]">GPIOPortF_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[29]">GPIOPortG_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2a]">GPIOPortH_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[40]">GPIOPortJ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[41]">GPIOPortK_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[42]">GPIOPortL_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[61]">GPIOPortM_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[62]">GPIOPortN_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[66]">GPIOPortP1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[67]">GPIOPortP2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[68]">GPIOPortP3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[69]">GPIOPortP4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6a]">GPIOPortP5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6b]">GPIOPortP6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6c]">GPIOPortP7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[65]">GPIOPortP_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6e]">GPIOPortQ1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6f]">GPIOPortQ2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[70]">GPIOPortQ3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[71]">GPIOPortQ4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[72]">GPIOPortQ5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[73]">GPIOPortQ6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[74]">GPIOPortQ7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6d]">GPIOPortQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[75]">GPIOPortR_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[76]">GPIOPortS_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[35]">Hibernate_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[80]">HitSound</a> from buzzer.o(i.HitSound) referenced from cube.o(i.CubeThread)
 <LI><a href="#[80]">HitSound</a> from buzzer.o(i.HitSound) referenced from pvzgame.o(i.bullet_hit_detection)
 <LI><a href="#[12]">I2C0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2f]">I2C1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4a]">I2C2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4b]">I2C3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5f]">I2C4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[60]">I2C5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3e]">I2S0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7f]">ImperialMarchTune</a> from buzzer.o(i.ImperialMarchTune) referenced from pages.o(i.Consumer)
 <LI><a href="#[7f]">ImperialMarchTune</a> from buzzer.o(i.ImperialMarchTune) referenced from pages.o(i.EndPage)
 <LI><a href="#[7f]">ImperialMarchTune</a> from buzzer.o(i.ImperialMarchTune) referenced from main.o(i.Restart)
 <LI><a href="#[7f]">ImperialMarchTune</a> from buzzer.o(i.ImperialMarchTune) referenced from main.o(i.main)
 <LI><a href="#[5e]">LPC0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[92]">Menu</a> from pages.o(i.Menu) referenced from pages.o(i.SW1_PageFunc)
 <LI><a href="#[1]">NMI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5d]">PECI0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[95]">PVZPage</a> from pages.o(i.PVZPage) referenced from pages.o(i.SW1_PageFunc)
 <LI><a href="#[7e]">PVZ_GameOver</a> from buzzer.o(i.PVZ_GameOver) referenced from pages.o(i.Consumer)
 <LI><a href="#[7e]">PVZ_GameOver</a> from buzzer.o(i.PVZ_GameOver) referenced from pages.o(i.EndPage)
 <LI><a href="#[13]">PWM0Fault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[14]">PWM0Generator0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[15]">PWM0Generator1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[16]">PWM0Generator2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[37]">PWM0Generator3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7b]">PWM1Fault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[77]">PWM1Generator0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[78]">PWM1Generator1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[79]">PWM1Generator2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7a]">PWM1Generator3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[ad]">PeriodicMove</a> from pvzgame.o(i.PeriodicMove) referenced from main.o(i.main)
 <LI><a href="#[ac]">PeriodicUpdater</a> from main.o(i.PeriodicUpdater) referenced from main.o(i.main)
 <LI><a href="#[ab]">Producer</a> from main.o(i.Producer) referenced from main.o(i.main)
 <LI><a href="#[17]">Quadrature0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[30]">Quadrature1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[63]">Quadrature2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[af]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[96]">Restart</a> from main.o(i.Restart) referenced from main.o(i.SW2Push)
 <LI><a href="#[11]">SSI0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2c]">SSI1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[43]">SSI2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[44]">SSI3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[a9]">SW1Push</a> from main.o(i.SW1Push) referenced from main.o(i.main)
 <LI><a href="#[aa]">SW2Push</a> from main.o(i.SW2Push) referenced from main.o(i.main)
 <LI><a href="#[93]">SettingPage</a> from pages.o(i.SettingPage) referenced from pages.o(i.SW1_PageFunc)
 <LI><a href="#[84]">StartPage</a> from pages.o(i.StartPage) referenced from pages.o(i.EndPage)
 <LI><a href="#[84]">StartPage</a> from pages.o(i.StartPage) referenced from pages.o(i.Menu)
 <LI><a href="#[84]">StartPage</a> from pages.o(i.StartPage) referenced from pages.o(i.PVZPage)
 <LI><a href="#[84]">StartPage</a> from pages.o(i.StartPage) referenced from main.o(i.Restart)
 <LI><a href="#[84]">StartPage</a> from pages.o(i.StartPage) referenced from pages.o(i.SW1_PageFunc)
 <LI><a href="#[84]">StartPage</a> from pages.o(i.StartPage) referenced from pages.o(i.SettingPage)
 <LI><a href="#[84]">StartPage</a> from pages.o(i.StartPage) referenced from main.o(i.main)
 <LI><a href="#[26]">SysCtl_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from osasm.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1d]">Timer0A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1e]">Timer0B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1f]">Timer1A_Handler</a> from os.o(i.Timer1A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[20]">Timer1B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[21]">Timer2A_Handler</a> from os.o(i.Timer2A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[22]">Timer2B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2d]">Timer3A_Handler</a> from os.o(i.Timer3A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[2e]">Timer3B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4c]">Timer4A_Handler</a> from os.o(i.Timer4A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[4d]">Timer4B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4e]">Timer5A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4f]">Timer5B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[f]">UART0_Handler</a> from uart.o(i.UART0_Handler) referenced from startup.o(RESET)
 <LI><a href="#[10]">UART1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2b]">UART2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[45]">UART3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[46]">UART4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[47]">UART5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[48]">UART6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[49]">UART7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[36]">USB0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1c]">WDT_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[50]">WideTimer0A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[51]">WideTimer0B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[52]">WideTimer1A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[53]">WideTimer1B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[54]">WideTimer2A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[55]">WideTimer2B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[56]">WideTimer3A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[57]">WideTimer3B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[58]">WideTimer4A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[59]">WideTimer4B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5a]">WideTimer5A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5b]">WideTimer5B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[39]">uDMA_Error</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[38]">uDMA_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[af]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ADC0Seq0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ADC0Seq1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC0Seq2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC0Seq3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ADC1Seq0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ADC1Seq1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC1Seq2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC1Seq3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Comp0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Comp1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Comp2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>Ethernet_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>ExtBus_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>Fan0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>FlashCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPIOPortA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPIOPortB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIOPortC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOPortE_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>GPIOPortF_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPIOPortG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>GPIOPortH_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIOPortJ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GPIOPortK_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>GPIOPortL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIOPortM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIOPortN_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPIOPortP1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIOPortP2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIOPortP3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIOPortP4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIOPortP5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIOPortP6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIOPortP7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIOPortP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIOPortQ1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIOPortQ2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIOPortQ3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIOPortQ4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIOPortQ5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPIOPortQ6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>GPIOPortQ7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIOPortQ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>GPIOPortR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>GPIOPortS_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>Hibernate_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>I2C0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2S0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>LPC0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>PECI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWM0Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PWM0Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PWM0Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM0Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PWM0Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>PWM1Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>PWM1Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>PWM1Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>PWM1Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>PWM1Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Quadrature0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>Quadrature1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>Quadrature2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SSI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SSI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SSI2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SSI3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SysCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Timer0A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Timer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Timer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Timer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>Timer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>Timer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>Timer5A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>Timer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USB0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>WideTimer0A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>WideTimer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>WideTimer1A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>WideTimer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>WideTimer2A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>WideTimer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>WideTimer3A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WideTimer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>WideTimer4A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>WideTimer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>WideTimer5A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>WideTimer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>uDMA_Error</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>uDMA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[132]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[b1]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b5]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[133]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[134]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[135]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[136]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[137]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[138]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[b3]"></a>parrotdelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parrotdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay1ms
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parrotdelay
</UL>

<P><STRONG><a name="[10b]"></a>OS_DisableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitC
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
</UL>

<P><STRONG><a name="[10e]"></a>OS_EnableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitC
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>StartOS</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Launch
</UL>

<P><STRONG><a name="[139]"></a>DisableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>EnableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>StartCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer4A
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer3A
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer2A
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer1A
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsFifo_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenStack_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseScore
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecreaseLife
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cube_Inc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cube_Dec
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_UARTFifo_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_UARTFifo_Init
</UL>

<P><STRONG><a name="[e8]"></a>EndCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer4A
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer3A
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer2A
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer1A
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsFifo_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenStack_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseScore
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecreaseLife
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cube_Inc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cube_Dec
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_UARTFifo_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_UARTFifo_Init
</UL>

<P><STRONG><a name="[13b]"></a>WaitForInterrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[13c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>BGMtone</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, buzzer.o(i.BGMtone))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = BGMtone &rArr; tone &rArr; OS_bSignal
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImperialMarchTune
</UL>

<P><STRONG><a name="[b9]"></a>BSP_Delay1ms</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.BSP_Delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parrotdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>

<P><STRONG><a name="[ba]"></a>BSP_Joystick_Init</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, joystick.o(i.BSP_Joystick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Joystick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcinit
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[e0]"></a>BSP_Joystick_Input</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, joystick.o(i.BSP_Joystick_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Joystick_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Producer
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrossHair_Init
</UL>

<P><STRONG><a name="[8d]"></a>BSP_LCD_DrawBitmap</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, lcd.o(i.BSP_LCD_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_LCD_DrawBitmap &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayThread
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPage
</UL>
<BR>[Address Reference Count : 3]<UL><LI> pages.o(i.PVZPage)
<LI> pages.o(i.StartPage)
<LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[a3]"></a>BSP_LCD_DrawChar</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, lcd.o(i.BSP_LCD_DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LCD_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUDec4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUDec3
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawStringHighlight
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[a1]"></a>BSP_LCD_DrawCharS</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, lcd.o(i.BSP_LCD_DrawCharS))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_LCD_DrawCharS &rArr; BSP_LCD_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[8c]"></a>BSP_LCD_DrawCrosshair</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcd.o(i.BSP_LCD_DrawCrosshair))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_LCD_DrawCrosshair &rArr; BSP_LCD_DrawFastVLine &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawFastVLine
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawFastHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
</UL>
<BR>[Address Reference Count : 5]<UL><LI> pages.o(i.Menu)
<LI> pages.o(i.PVZPage)
<LI> pages.o(i.SettingPage)
<LI> pages.o(i.StartPage)
<LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[9e]"></a>BSP_LCD_DrawFastHLine</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, lcd.o(i.BSP_LCD_DrawFastHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LCD_DrawFastHLine &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCrosshair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[9c]"></a>BSP_LCD_DrawFastVLine</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, lcd.o(i.BSP_LCD_DrawFastVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LCD_DrawFastVLine &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCrosshair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[97]"></a>BSP_LCD_DrawPixel</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lcd.o(i.BSP_LCD_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_LCD_DrawPixel &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCharS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[8b]"></a>BSP_LCD_DrawString</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lcd.o(i.BSP_LCD_DrawString))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BSP_LCD_DrawString &rArr; BSP_LCD_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUDec4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUDec3
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_MessageUDec3
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Message
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart
</UL>
<BR>[Address Reference Count : 4]<UL><LI> pages.o(i.Menu)
<LI> pages.o(i.SettingPage)
<LI> pages.o(i.StartPage)
<LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[8a]"></a>BSP_LCD_DrawStringHighlight</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lcd.o(i.BSP_LCD_DrawStringHighlight))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BSP_LCD_DrawStringHighlight &rArr; BSP_LCD_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawChar
</UL>
<BR>[Address Reference Count : 4]<UL><LI> pages.o(i.Menu)
<LI> pages.o(i.SettingPage)
<LI> pages.o(i.StartPage)
<LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[99]"></a>BSP_LCD_FillRect</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, lcd.o(i.BSP_LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LCD_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillScreen
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCharS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CubeThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[9a]"></a>BSP_LCD_FillScreen</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd.o(i.BSP_LCD_FillScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_LCD_FillScreen &rArr; BSP_LCD_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutputInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPage
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrossHair_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[bf]"></a>BSP_LCD_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lcd.o(i.BSP_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_LCD_Init &rArr; ST7735_InitR &rArr; BSP_LCD_FillScreen &rArr; BSP_LCD_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutputInit
</UL>

<P><STRONG><a name="[82]"></a>BSP_LCD_Message</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lcd.o(i.BSP_LCD_Message))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BSP_LCD_Message &rArr; BSP_LCD_OutUDec4 &rArr; BSP_LCD_DrawString &rArr; BSP_LCD_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetCursor
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUDec4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawString
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScoreLife
</UL>
<BR>[Address Reference Count : 5]<UL><LI> pages.o(i.Menu)
<LI> pages.o(i.SettingPage)
<LI> pages.o(i.StartPage)
<LI> screen.o(i.act_FuncInStack)
<LI> main.o(i.Display)
</UL>
<P><STRONG><a name="[89]"></a>BSP_LCD_MessageUDec3</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lcd.o(i.BSP_LCD_MessageUDec3))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BSP_LCD_MessageUDec3 &rArr; BSP_LCD_OutUDec3 &rArr; BSP_LCD_DrawString &rArr; BSP_LCD_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetCursor
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUDec3
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawString
</UL>
<BR>[Address Reference Count : 4]<UL><LI> pages.o(i.Menu)
<LI> pages.o(i.PVZPage)
<LI> pages.o(i.SettingPage)
<LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[c3]"></a>BSP_LCD_OutUDec3</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lcd.o(i.BSP_LCD_OutUDec3))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_LCD_OutUDec3 &rArr; BSP_LCD_DrawString &rArr; BSP_LCD_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawString
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawChar
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage3
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_MessageUDec3
</UL>

<P><STRONG><a name="[c2]"></a>BSP_LCD_OutUDec4</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lcd.o(i.BSP_LCD_OutUDec4))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_LCD_OutUDec4 &rArr; BSP_LCD_DrawString &rArr; BSP_LCD_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawString
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawChar
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage4
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Message
</UL>

<P><STRONG><a name="[c6]"></a>BSP_LCD_OutputInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.BSP_LCD_OutputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = BSP_LCD_OutputInit &rArr; BSP_LCD_Init &rArr; ST7735_InitR &rArr; BSP_LCD_FillScreen &rArr; BSP_LCD_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillScreen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[c1]"></a>BSP_LCD_SetCursor</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd.o(i.BSP_LCD_SetCursor))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_MessageUDec3
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Message
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[98]"></a>BitmapSetPixel</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, screen.o(i.BitmapSetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BitmapSetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_FuncInStack
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawCharS_Background
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawCharS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[a0]"></a>Bitmap_DrawBitmap</STRONG> (Thumb, 300 bytes, Stack size 36 bytes, screen.o(i.Bitmap_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Bitmap_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_FuncInStack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[85]"></a>Bitmap_DrawBitmapTP</STRONG> (Thumb, 366 bytes, Stack size 36 bytes, screen.o(i.Bitmap_DrawBitmapTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Bitmap_DrawBitmapTP
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_FuncInStack
</UL>
<BR>[Address Reference Count : 3]<UL><LI> pages.o(i.PVZPage)
<LI> screen.o(i.act_FuncInStack)
<LI> pvzgame.o(i.EntityInit)
</UL>
<P><STRONG><a name="[8e]"></a>Bitmap_DrawBox</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, screen.o(i.Bitmap_DrawBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Bitmap_DrawBox &rArr; Bitmap_DrawVLine &rArr; Bitmap_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawVLine
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_FuncInStack
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pages.o(i.PVZPage)
<LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[a2]"></a>Bitmap_DrawCharS</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, screen.o(i.Bitmap_DrawCharS))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Bitmap_DrawCharS &rArr; Bitmap_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_FillRect
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitmapSetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_FuncInStack
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_OutUDec4
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_OutUDec3
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[c8]"></a>Bitmap_DrawCharS_Background</STRONG> (Thumb, 220 bytes, Stack size 44 bytes, screen.o(i.Bitmap_DrawCharS_Background))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Bitmap_DrawCharS_Background &rArr; Bitmap_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_FillRect
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitmapSetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawStringHighlight
</UL>

<P><STRONG><a name="[a8]"></a>Bitmap_DrawCrosshair</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, screen.o(i.Bitmap_DrawCrosshair))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Bitmap_DrawCrosshair &rArr; Bitmap_DrawVLine &rArr; Bitmap_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawVLine
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_FuncInStack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[9f]"></a>Bitmap_DrawHLine</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, screen.o(i.Bitmap_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Bitmap_DrawHLine &rArr; Bitmap_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_FuncInStack
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawCrosshair
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawBox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[a4]"></a>Bitmap_DrawString</STRONG> (Thumb, 80 bytes, Stack size 28 bytes, screen.o(i.Bitmap_DrawString))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Bitmap_DrawString &rArr; Bitmap_DrawCharS &rArr; Bitmap_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawCharS
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_FuncInStack
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_OutUDec4
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_OutUDec3
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_MessageUDec4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_MessageUDec3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[a5]"></a>Bitmap_DrawStringHighlight</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, screen.o(i.Bitmap_DrawStringHighlight))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Bitmap_DrawStringHighlight &rArr; Bitmap_DrawCharS_Background &rArr; Bitmap_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawCharS_Background
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_FuncInStack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[9d]"></a>Bitmap_DrawVLine</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, screen.o(i.Bitmap_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Bitmap_DrawVLine &rArr; Bitmap_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_FuncInStack
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawCrosshair
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawBox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[86]"></a>Bitmap_FillRect</STRONG> (Thumb, 286 bytes, Stack size 36 bytes, screen.o(i.Bitmap_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Bitmap_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_FuncInStack
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_FillScreen
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawVLine
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawHLine
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawCharS_Background
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawCharS
</UL>
<BR>[Address Reference Count : 2]<UL><LI> screen.o(i.act_FuncInStack)
<LI> pvzgame.o(i.EntityInit)
</UL>
<P><STRONG><a name="[9b]"></a>Bitmap_FillScreen</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, screen.o(i.Bitmap_FillScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bitmap_FillScreen &rArr; Bitmap_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_FuncInStack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[a7]"></a>Bitmap_MessageUDec3</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, screen.o(i.Bitmap_MessageUDec3))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Bitmap_MessageUDec3 &rArr; Bitmap_OutUDec3 &rArr; Bitmap_DrawString &rArr; Bitmap_DrawCharS &rArr; Bitmap_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_SetCursor
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_OutUDec3
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawString
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_FuncInStack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[a6]"></a>Bitmap_MessageUDec4</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, screen.o(i.Bitmap_MessageUDec4))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Bitmap_MessageUDec4 &rArr; Bitmap_OutUDec4 &rArr; Bitmap_DrawString &rArr; Bitmap_DrawCharS &rArr; Bitmap_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_SetCursor
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_OutUDec4
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawString
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_FuncInStack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(i.act_FuncInStack)
</UL>
<P><STRONG><a name="[ca]"></a>Bitmap_OutUDec3</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, screen.o(i.Bitmap_OutUDec3))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Bitmap_OutUDec3 &rArr; Bitmap_DrawString &rArr; Bitmap_DrawCharS &rArr; Bitmap_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawString
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawCharS
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_fillmessage3
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_MessageUDec3
</UL>

<P><STRONG><a name="[cb]"></a>Bitmap_OutUDec4</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, screen.o(i.Bitmap_OutUDec4))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Bitmap_OutUDec4 &rArr; Bitmap_DrawString &rArr; Bitmap_DrawCharS &rArr; Bitmap_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawString
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawCharS
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_fillmessage4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_MessageUDec4
</UL>

<P><STRONG><a name="[c9]"></a>Bitmap_SetCursor</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, screen.o(i.Bitmap_SetCursor))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_MessageUDec4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_MessageUDec3
</UL>

<P><STRONG><a name="[f2]"></a>Bitmap_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, screen.o(i.Bitmap_init))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayThread
</UL>

<P><STRONG><a name="[106]"></a>ButtonOneInit</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, os.o(i.ButtonOneInit))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddSW1Task
</UL>

<P><STRONG><a name="[108]"></a>ButtonTwoInit</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, os.o(i.ButtonTwoInit))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddSW2Task
</UL>

<P><STRONG><a name="[cf]"></a>Buzzer_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, buzzer.o(i.Buzzer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Buzzer_Init &rArr; OS_InitSemaphore
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM6F_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM6C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>ChangeDirection</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cube.o(i.ChangeDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ChangeDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Generate
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cube_SetCubeNext
</UL>

<P><STRONG><a name="[94]"></a>Consumer</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, pages.o(i.Consumer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Consumer &rArr; LCD_DisplayScoreLife &rArr; BSP_LCD_Message &rArr; BSP_LCD_OutUDec4 &rArr; BSP_LCD_DrawString &rArr; BSP_LCD_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Time
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillScreen
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawString
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawCrosshair
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsFifo_Get
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoreLife_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScoreLife
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLife
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cube_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pages.o(i.SW1_PageFunc)
</UL>
<P><STRONG><a name="[df]"></a>CrossHair_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.CrossHair_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = CrossHair_Init &rArr; BSP_LCD_FillScreen &rArr; BSP_LCD_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillScreen
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Joystick_Input
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>CubeNumCalc</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(i.CubeNumCalc))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[81]"></a>CubeThread</STRONG> (Thumb, 594 bytes, Stack size 56 bytes, cube.o(i.CubeThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = CubeThread &rArr; BSP_LCD_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Generate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseScore
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLife
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecreaseLife
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cube_hit_cube
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cube_SetCubeNext
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cube_Dec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cube.o(i.Cube_Generate)
</UL>
<P><STRONG><a name="[e6]"></a>Cube_Dec</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cube.o(i.Cube_Dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Cube_Dec
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CubeThread
</UL>

<P><STRONG><a name="[7d]"></a>Cube_Generate</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, cube.o(i.Cube_Generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Cube_Generate &rArr; OS_AddThread
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Generate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLife
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cube_Inc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pages.o(i.Consumer)
</UL>
<P><STRONG><a name="[e9]"></a>Cube_Inc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cube.o(i.Cube_Inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Cube_Inc
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cube_Generate
</UL>

<P><STRONG><a name="[d9]"></a>Cube_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cube.o(i.Cube_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Cube_Init &rArr; OS_InitSemaphore
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
</UL>

<P><STRONG><a name="[e5]"></a>Cube_SetCubeNext</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, cube.o(i.Cube_SetCubeNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cube_SetCubeNext &rArr; ChangeDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CubeThread
</UL>

<P><STRONG><a name="[e2]"></a>Cube_hit_cube</STRONG> (Thumb, 184 bytes, Stack size 36 bytes, cube.o(i.Cube_hit_cube))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Cube_hit_cube
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CubeThread
</UL>

<P><STRONG><a name="[e4]"></a>DecreaseLife</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, scorelife.o(i.DecreaseLife))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = DecreaseLife
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CubeThread
</UL>

<P><STRONG><a name="[ea]"></a>Device_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.Device_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Device_Init &rArr; BSP_LCD_OutputInit &rArr; BSP_LCD_Init &rArr; ST7735_InitR &rArr; BSP_LCD_FillScreen &rArr; BSP_LCD_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutputInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Joystick_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>DispStackRst</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, screenstack.o(i.DispStackRst))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = DispStackRst &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayThread
</UL>

<P><STRONG><a name="[f3]"></a>DispStackSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, screenstack.o(i.DispStackSize))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayThread
</UL>

<P><STRONG><a name="[ef]"></a>DispStack_Get</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, screenstack.o(i.DispStack_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = DispStack_Get &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayThread
</UL>

<P><STRONG><a name="[90]"></a>Display</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, main.o(i.Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Display &rArr; Request_StackPut &rArr; OS_WaitC
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_StackPut
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.Restart)
<LI> main.o(i.main)
</UL>
<P><STRONG><a name="[83]"></a>DisplayThread</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, display.o(i.DisplayThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = DisplayThread &rArr; act_FuncInStack &rArr; Bitmap_MessageUDec4 &rArr; Bitmap_OutUDec4 &rArr; Bitmap_DrawString &rArr; Bitmap_DrawCharS &rArr; Bitmap_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_FuncInStack
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_StackOut
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStack_Get
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStackSize
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStackRst
</UL>
<BR>[Address Reference Count : 3]<UL><LI> pages.o(i.EndPage)
<LI> main.o(i.Restart)
<LI> main.o(i.main)
</UL>
<P><STRONG><a name="[8f]"></a>EndPage</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, pages.o(i.EndPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = EndPage &rArr; BSP_LCD_FillScreen &rArr; BSP_LCD_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillScreen
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenStack_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pages.o(i.PVZPage)
</UL>
<P><STRONG><a name="[114]"></a>EntityInit</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, pvzgame.o(i.EntityInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EntityInit
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVZPage
</UL>

<P><STRONG><a name="[91]"></a>EventSound</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, buzzer.o(i.EventSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = EventSound &rArr; OS_bSignal
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM6F_Set
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM6F_Enable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM6F_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pages.o(i.SW1_PageFunc)
</UL>
<P><STRONG><a name="[d]"></a>GPIOPortD_Handler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, os.o(i.GPIOPortD_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GPIOPortD_Handler &rArr; OS_AddThread
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>GetLife</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scorelife.o(i.GetLife))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScoreLife
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cube_Generate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CubeThread
</UL>

<P><STRONG><a name="[101]"></a>GetScore</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scorelife.o(i.GetScore))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScoreLife
</UL>

<P><STRONG><a name="[80]"></a>HitSound</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, buzzer.o(i.HitSound))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = HitSound &rArr; OS_bSignal
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM6F_Set
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM6F_Enable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM6F_Disable
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pvzgame.o(i.bullet_hit_detection)
<LI> cube.o(i.CubeThread)
</UL>
<P><STRONG><a name="[7f]"></a>ImperialMarchTune</STRONG> (Thumb, 1180 bytes, Stack size 0 bytes, buzzer.o(i.ImperialMarchTune))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ImperialMarchTune &rArr; BGMtone &rArr; tone &rArr; OS_bSignal
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toneblank
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BGMtone
</UL>
<BR>[Address Reference Count : 4]<UL><LI> pages.o(i.EndPage)
<LI> main.o(i.Restart)
<LI> main.o(i.main)
<LI> pages.o(i.Consumer)
</UL>
<P><STRONG><a name="[e3]"></a>IncreaseScore</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, scorelife.o(i.IncreaseScore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = IncreaseScore
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CubeThread
</UL>

<P><STRONG><a name="[fb]"></a>InitTimer1A</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, os.o(i.InitTimer1A))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = InitTimer1A
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddPeriodicThread
</UL>

<P><STRONG><a name="[fc]"></a>InitTimer2A</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, os.o(i.InitTimer2A))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = InitTimer2A
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[fd]"></a>InitTimer3A</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, os.o(i.InitTimer3A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = InitTimer3A
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[fe]"></a>InitTimer4A</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, os.o(i.InitTimer4A))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = InitTimer4A
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddPeriodicThread
</UL>

<P><STRONG><a name="[dc]"></a>JsFifo_Get</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fifo.o(i.JsFifo_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = JsFifo_Get &rArr; OS_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPage
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingPage
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVZPage
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
</UL>

<P><STRONG><a name="[ff]"></a>JsFifo_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fifo.o(i.JsFifo_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = JsFifo_Init &rArr; OS_InitSemaphore
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>JsFifo_Put</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fifo.o(i.JsFifo_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = JsFifo_Put &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Producer
</UL>

<P><STRONG><a name="[dd]"></a>LCD_DisplayScoreLife</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, scorelife.o(i.LCD_DisplayScoreLife))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LCD_DisplayScoreLife &rArr; BSP_LCD_Message &rArr; BSP_LCD_OutUDec4 &rArr; BSP_LCD_DrawString &rArr; BSP_LCD_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Message
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLife
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScore
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
</UL>

<P><STRONG><a name="[92]"></a>Menu</STRONG> (Thumb, 846 bytes, Stack size 24 bytes, pages.o(i.Menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Menu &rArr; Request_StackPut &rArr; OS_WaitC
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsFifo_Get
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_StackPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pages.o(i.SW1_PageFunc)
</UL>
<P><STRONG><a name="[102]"></a>NumFifo_Get</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, numfifo.o(i.NumFifo_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = NumFifo_Get &rArr; OS_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingPage
</UL>

<P><STRONG><a name="[103]"></a>NumFifo_Put</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, numfifo.o(i.NumFifo_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = NumFifo_Put &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Producer
</UL>

<P><STRONG><a name="[104]"></a>OS_AddPeriodicThread</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, os.o(i.OS_AddPeriodicThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OS_AddPeriodicThread &rArr; InitTimer4A
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer4A
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer1A
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>OS_AddSW1Task</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os.o(i.OS_AddSW1Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_AddSW1Task
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonOneInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>OS_AddSW2Task</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os.o(i.OS_AddSW2Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_AddSW2Task
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonTwoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>OS_AddThread</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, os.o(i.OS_AddThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OS_AddThread
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInitialStack
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsTime
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortD_Handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingPage
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1_PageFunc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVZPage
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPage
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cube_Generate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CubeThread
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_hit_detection
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW2Push
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart
</UL>

<P><STRONG><a name="[10d]"></a>OS_ClearMsTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os.o(i.OS_ClearMsTime))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW2Push
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1Push
</UL>

<P><STRONG><a name="[10f]"></a>OS_Id</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os.o(i.OS_Id))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
</UL>

<P><STRONG><a name="[10a]"></a>OS_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, os.o(i.OS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_Init &rArr; InitTimer2A
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisableInterrupts
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ClearMsTime
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer3A
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer2A
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>OS_InitSemaphore</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, os.o(i.OS_InitSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_InitSemaphore
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnableInterrupts
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutputInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsFifo_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenStack_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cube_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_UARTFifo_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_UARTFifo_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrossHair_Init
</UL>

<P><STRONG><a name="[b7]"></a>OS_Kill</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os.o(i.OS_Kill))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Kill
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Id
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebouncePD7
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebouncePD6
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayThread
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPage
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingPage
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVZPage
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPage
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVZ_GameOver
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventSound
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BGMtone
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HitSound
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cube_Generate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CubeThread
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>

<P><STRONG><a name="[110]"></a>OS_Launch</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os.o(i.OS_Launch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Launch
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOS
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>OS_MsTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os.o(i.OS_MsTime))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toneblank
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventSound
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HitSound
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW2Push
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1Push
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart
</UL>

<P><STRONG><a name="[ee]"></a>OS_Signal</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os.o(i.OS_Signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnableInterrupts
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsFifo_Put
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_StackPut
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayThread
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPage
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumFifo_Put
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_UARTFifo_Get
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_UARTFifo_Put
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_StackOut
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStack_Get
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStackRst
</UL>

<P><STRONG><a name="[e1]"></a>OS_Sleep</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, os.o(i.OS_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OS_Sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebouncePD7
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebouncePD6
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPage
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toneblank
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventSound
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CubeThread
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart
</UL>

<P><STRONG><a name="[d4]"></a>OS_Suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os.o(i.OS_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitC
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayThread
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPage
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingPage
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVZPage
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPage
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HitSound
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CubeThread
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CubeNumCalc
</UL>

<P><STRONG><a name="[d7]"></a>OS_Time</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os.o(i.OS_Time))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZB_Generate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Producer
</UL>

<P><STRONG><a name="[ed]"></a>OS_Wait</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os.o(i.OS_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnableInterrupts
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisableInterrupts
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsFifo_Get
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayThread
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPage
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumFifo_Get
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_UARTFifo_Put
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_StackOut
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStack_Get
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispStackRst
</UL>

<P><STRONG><a name="[112]"></a>OS_WaitC</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os.o(i.OS_WaitC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_WaitC
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnableInterrupts
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisableInterrupts
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_StackPut
</UL>

<P><STRONG><a name="[d6]"></a>OS_bSignal</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, os.o(i.OS_bSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_bSignal
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnableInterrupts
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1_PageFunc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventSound
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HitSound
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CubeThread
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart
</UL>

<P><STRONG><a name="[d5]"></a>OS_bWait</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os.o(i.OS_bWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_bWait
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnableInterrupts
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisableInterrupts
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1_PageFunc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventSound
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HitSound
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CubeThread
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart
</UL>

<P><STRONG><a name="[10c]"></a>PLL_Init</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, pll.o(i.PLL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[95]"></a>PVZPage</STRONG> (Thumb, 1496 bytes, Stack size 32 bytes, pages.o(i.PVZPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = PVZPage &rArr; Request_StackPut &rArr; OS_WaitC
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsFifo_Get
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZB_Generate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SunGenerate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_StackPut
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVZ_map_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EntityInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pages.o(i.SW1_PageFunc)
</UL>
<P><STRONG><a name="[7e]"></a>PVZ_GameOver</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, buzzer.o(i.PVZ_GameOver))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = PVZ_GameOver &rArr; tone &rArr; OS_bSignal
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pages.o(i.EndPage)
<LI> pages.o(i.Consumer)
</UL>
<P><STRONG><a name="[113]"></a>PVZ_map_Init</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, pvzgame.o(i.PVZ_map_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PVZ_map_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVZPage
</UL>

<P><STRONG><a name="[d1]"></a>PWM6C_Init</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, pwm.o(i.PWM6C_Init))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init
</UL>

<P><STRONG><a name="[f9]"></a>PWM6F_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm.o(i.PWM6F_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventSound
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HitSound
</UL>

<P><STRONG><a name="[f8]"></a>PWM6F_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm.o(i.PWM6F_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventSound
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HitSound
</UL>

<P><STRONG><a name="[d0]"></a>PWM6F_Init</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, pwm.o(i.PWM6F_Init))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init
</UL>

<P><STRONG><a name="[f7]"></a>PWM6F_Set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWM6F_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventSound
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HitSound
</UL>

<P><STRONG><a name="[ad]"></a>PeriodicMove</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, pvzgame.o(i.PeriodicMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = PeriodicMove &rArr; UART_OutUDec &rArr;  UART_OutUDec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUDec
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_move
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_hit_detection
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zomb_move
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zomb_eat_plant
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[ac]"></a>PeriodicUpdater</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.PeriodicUpdater))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[ab]"></a>Producer</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, main.o(i.Producer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Producer &rArr; JsFifo_Put &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Time
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Joystick_Input
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsFifo_Put
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumFifo_Put
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePosition
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[d3]"></a>RNG_Generate</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, randomnumbergenerator.o(i.RNG_Generate))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZB_Generate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cube_Generate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CubeThread
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeDirection
</UL>

<P><STRONG><a name="[d8]"></a>RNG_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, randomnumbergenerator.o(i.RNG_Init))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZB_Generate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
</UL>

<P><STRONG><a name="[f1]"></a>Request_StackOut</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, screenstack.o(i.Request_StackOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Request_StackOut &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayThread
</UL>

<P><STRONG><a name="[f0]"></a>Request_StackPut</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, screenstack.o(i.Request_StackPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Request_StackPut &rArr; OS_WaitC
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitC
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartPage
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SettingPage
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVZPage
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>

<P><STRONG><a name="[96]"></a>Restart</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, main.o(i.Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Restart &rArr; BSP_LCD_DrawString &rArr; BSP_LCD_DrawChar &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillScreen
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawString
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenStack_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.SW2Push)
</UL>
<P><STRONG><a name="[120]"></a>Rx_UARTFifo_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart_fifo.o(i.Rx_UARTFifo_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Rx_UARTFifo_Init &rArr; OS_InitSemaphore
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[121]"></a>Rx_UARTFifo_Put</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart_fifo.o(i.Rx_UARTFifo_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Rx_UARTFifo_Put &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyHardwareToSoftware
</UL>

<P><STRONG><a name="[130]"></a>Rx_UARTFifo_Size</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uart_fifo.o(i.Rx_UARTFifo_Size))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyHardwareToSoftware
</UL>

<P><STRONG><a name="[a9]"></a>SW1Push</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.SW1Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = SW1Push &rArr; SW1_PageFunc &rArr; OS_AddThread
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsTime
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ClearMsTime
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1_PageFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[125]"></a>SW1_PageFunc</STRONG> (Thumb, 832 bytes, Stack size 16 bytes, pages.o(i.SW1_PageFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = SW1_PageFunc &rArr; OS_AddThread
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sunflower_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooter_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1Push
</UL>

<P><STRONG><a name="[aa]"></a>SW2Push</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.SW2Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SW2Push &rArr; OS_AddThread
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsTime
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ClearMsTime
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[b4]"></a>Scheduler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, os.o(i.Scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsTime
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[da]"></a>ScoreLife_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scorelife.o(i.ScoreLife_Init))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Consumer
</UL>

<P><STRONG><a name="[f5]"></a>ScreenStack_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, screenstack.o(i.ScreenStack_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ScreenStack_Init &rArr; OS_InitSemaphore
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPage
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart
</UL>

<P><STRONG><a name="[11f]"></a>Search_instance</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, screenstack.o(i.Search_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Search_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_StackOut
</UL>

<P><STRONG><a name="[109]"></a>SetInitialStack</STRONG> (Thumb, 330 bytes, Stack size 0 bytes, os.o(i.SetInitialStack))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
</UL>

<P><STRONG><a name="[93]"></a>SettingPage</STRONG> (Thumb, 816 bytes, Stack size 24 bytes, pages.o(i.SettingPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SettingPage &rArr; Request_StackPut &rArr; OS_WaitC
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsFifo_Get
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_StackPut
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumFifo_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pages.o(i.SW1_PageFunc)
</UL>
<P><STRONG><a name="[127]"></a>Shooter_Init</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, pvzgame.o(i.Shooter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Shooter_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1_PageFunc
</UL>

<P><STRONG><a name="[84]"></a>StartPage</STRONG> (Thumb, 604 bytes, Stack size 8 bytes, pages.o(i.StartPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = StartPage &rArr; Request_StackPut &rArr; OS_WaitC
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsFifo_Get
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_StackPut
</UL>
<BR>[Address Reference Count : 7]<UL><LI> pages.o(i.EndPage)
<LI> pages.o(i.Menu)
<LI> pages.o(i.PVZPage)
<LI> main.o(i.Restart)
<LI> main.o(i.main)
<LI> pages.o(i.SW1_PageFunc)
<LI> pages.o(i.SettingPage)
</UL>
<P><STRONG><a name="[115]"></a>SunGenerate</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, pvzgame.o(i.SunGenerate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SunGenerate
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVZPage
</UL>

<P><STRONG><a name="[126]"></a>Sunflower_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, pvzgame.o(i.Sunflower_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sunflower_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW1_PageFunc
</UL>

<P><STRONG><a name="[1f]"></a>Timer1A_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os.o(i.Timer1A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer1A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Timer2A_Handler</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, os.o(i.Timer2A_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>Timer3A_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os.o(i.Timer3A_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>Timer4A_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os.o(i.Timer4A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer4A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[128]"></a>Tx_UARTFifo_Get</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uart_fifo.o(i.Tx_UARTFifo_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Tx_UARTFifo_Get &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
</UL>

<P><STRONG><a name="[129]"></a>Tx_UARTFifo_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart_fifo.o(i.Tx_UARTFifo_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Tx_UARTFifo_Init &rArr; OS_InitSemaphore
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[12a]"></a>Tx_UARTFifo_Put</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart_fifo.o(i.Tx_UARTFifo_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Tx_UARTFifo_Put &rArr; OS_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>

<P><STRONG><a name="[12c]"></a>Tx_UARTFifo_Size</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart_fifo.o(i.Tx_UARTFifo_Size))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
</UL>

<P><STRONG><a name="[f]"></a>UART0_Handler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, uart.o(i.UART0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = UART0_Handler &rArr; copyHardwareToSoftware &rArr; Rx_UARTFifo_Put &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyHardwareToSoftware
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_UARTFifo_Size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>UART_Init</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = UART_Init &rArr; Tx_UARTFifo_Init &rArr; OS_InitSemaphore
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_UARTFifo_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_UARTFifo_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[118]"></a>UART_OutChar</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart.o(i.UART_OutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = UART_OutChar &rArr; copySoftwareToHardware &rArr; Tx_UARTFifo_Get &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_UARTFifo_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUDec
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicMove
</UL>

<P><STRONG><a name="[117]"></a>UART_OutUDec</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart.o(i.UART_OutUDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = UART_OutUDec &rArr;  UART_OutUDec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUDec
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUDec
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicMove
</UL>

<P><STRONG><a name="[11e]"></a>UpdateInput</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, main.o(i.UpdateInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdateInput
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Producer
</UL>

<P><STRONG><a name="[11d]"></a>UpdatePosition</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, main.o(i.UpdatePosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdatePosition
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Producer
</UL>

<P><STRONG><a name="[116]"></a>ZB_Generate</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, pvzgame.o(i.ZB_Generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ZB_Generate &rArr; ZB_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Time
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Generate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVZPage
</UL>

<P><STRONG><a name="[12e]"></a>ZB_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, pvzgame.o(i.ZB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ZB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZB_Generate
</UL>

<P><STRONG><a name="[11c]"></a>Zomb_eat_plant</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, pvzgame.o(i.Zomb_eat_plant))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Zomb_eat_plant &rArr; soil_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soil_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicMove
</UL>

<P><STRONG><a name="[11b]"></a>Zomb_move</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, pvzgame.o(i.Zomb_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Zomb_move
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicMove
</UL>

<P><STRONG><a name="[13f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[140]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[141]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[f4]"></a>act_FuncInStack</STRONG> (Thumb, 528 bytes, Stack size 16 bytes, screen.o(i.act_FuncInStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = act_FuncInStack &rArr; Bitmap_MessageUDec4 &rArr; Bitmap_OutUDec4 &rArr; Bitmap_DrawString &rArr; Bitmap_DrawCharS &rArr; Bitmap_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_MessageUDec4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_MessageUDec3
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_FillScreen
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_FillRect
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawVLine
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawStringHighlight
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawString
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawHLine
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawCrosshair
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawCharS
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawBitmap
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitmapSetPixel
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawBox
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_DrawBitmapTP
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayThread
</UL>

<P><STRONG><a name="[11a]"></a>bullet_hit_detection</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, pvzgame.o(i.bullet_hit_detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = bullet_hit_detection &rArr; OS_AddThread
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicMove
</UL>

<P><STRONG><a name="[119]"></a>bullet_move</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pvzgame.o(i.bullet_move))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicMove
</UL>

<P><STRONG><a name="[7c]"></a>main</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = main &rArr; Device_Init &rArr; BSP_LCD_OutputInit &rArr; BSP_LCD_Init &rArr; ST7735_InitR &rArr; BSP_LCD_FillScreen &rArr; BSP_LCD_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Launch
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddSW2Task
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddSW1Task
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddPeriodicThread
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JsFifo_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenStack_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrossHair_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[12f]"></a>soil_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pvzgame.o(i.soil_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = soil_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zomb_eat_plant
</UL>

<P><STRONG><a name="[b8]"></a>tone</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, buzzer.o(i.tone))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tone &rArr; OS_bSignal
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsTime
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM6F_Set
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM6F_Enable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM6F_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVZ_GameOver
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BGMtone
</UL>

<P><STRONG><a name="[fa]"></a>toneblank</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, buzzer.o(i.toneblank))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = toneblank &rArr; OS_Sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsTime
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImperialMarchTune
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[bb]"></a>adcinit</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, joystick.o(i.adcinit))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Joystick_Init
</UL>

<P><STRONG><a name="[c0]"></a>ST7735_InitR</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lcd.o(i.ST7735_InitR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ST7735_InitR &rArr; BSP_LCD_FillScreen &rArr; BSP_LCD_FillRect &rArr; setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_SetCursor
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillScreen
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
</UL>

<P><STRONG><a name="[123]"></a>commandList</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lcd.o(i.commandList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = commandList &rArr; BSP_Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay1ms
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[122]"></a>commonInit</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, lcd.o(i.commonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = commonInit &rArr; commandList &rArr; BSP_Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay1ms
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[131]"></a>fillmessage</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, lcd.o(i.fillmessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + In Cycle
<LI>Call Chain = fillmessage &rArr;  fillmessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage4
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage3
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
</UL>

<P><STRONG><a name="[c4]"></a>fillmessage3</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lcd.o(i.fillmessage3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fillmessage3 &rArr; fillmessage &rArr;  fillmessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUDec3
</UL>

<P><STRONG><a name="[c5]"></a>fillmessage4</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lcd.o(i.fillmessage4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fillmessage4 &rArr; fillmessage &rArr;  fillmessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_OutUDec4
</UL>

<P><STRONG><a name="[be]"></a>pushColor</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(i.pushColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pushColor
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawChar
</UL>

<P><STRONG><a name="[bc]"></a>setAddrWindow</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lcd.o(i.setAddrWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setAddrWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawPixel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawFastVLine
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawFastHLine
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawChar
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
</UL>

<P><STRONG><a name="[124]"></a>writecommand</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lcd.o(i.writecommand))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[bd]"></a>writedata</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lcd.o(i.writedata))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawFastVLine
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawFastHLine
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[87]"></a>DebouncePD6</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, os.o(i.DebouncePD6))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DebouncePD6 &rArr; OS_Kill
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os.o(i.GPIOPortD_Handler)
</UL>
<P><STRONG><a name="[88]"></a>DebouncePD7</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, os.o(i.DebouncePD7))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DebouncePD7 &rArr; OS_Kill
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os.o(i.GPIOPortD_Handler)
</UL>
<P><STRONG><a name="[12d]"></a>copyHardwareToSoftware</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart.o(i.copyHardwareToSoftware))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = copyHardwareToSoftware &rArr; Rx_UARTFifo_Put &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_UARTFifo_Size
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_UARTFifo_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[12b]"></a>copySoftwareToHardware</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uart.o(i.copySoftwareToHardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = copySoftwareToHardware &rArr; Tx_UARTFifo_Get &rArr; OS_Signal
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_UARTFifo_Size
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_UARTFifo_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>

<P><STRONG><a name="[ce]"></a>Bitmap_fillmessage</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, screen.o(i.Bitmap_fillmessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + In Cycle
<LI>Call Chain = Bitmap_fillmessage &rArr;  Bitmap_fillmessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_fillmessage
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_fillmessage4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_fillmessage3
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_fillmessage
</UL>

<P><STRONG><a name="[cc]"></a>Bitmap_fillmessage3</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, screen.o(i.Bitmap_fillmessage3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bitmap_fillmessage3 &rArr; Bitmap_fillmessage &rArr;  Bitmap_fillmessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_fillmessage
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_OutUDec3
</UL>

<P><STRONG><a name="[cd]"></a>Bitmap_fillmessage4</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, screen.o(i.Bitmap_fillmessage4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bitmap_fillmessage4 &rArr; Bitmap_fillmessage &rArr;  Bitmap_fillmessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_fillmessage
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bitmap_OutUDec4
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
